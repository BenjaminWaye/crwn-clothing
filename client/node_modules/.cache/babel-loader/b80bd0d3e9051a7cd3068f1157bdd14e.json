{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCr6as0ieF0m9gXabFRC3ANiTY0G1_GHtk\",\n  authDomain: \"crwn-db-e86e7.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-e86e7.firebaseio.com\",\n  projectId: \"crwn-db-e86e7\",\n  storageBucket: \"crwn-db-e86e7.appspot.com\",\n  messagingSenderId: \"887686867026\",\n  appId: \"1:887686867026:web:80972ffb9ca1290ff0978b\"\n};\nexport const addCollectionsAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/benjaminwaye/Sites/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","firestore","collection","console","log","batch","forEach","obj","newDocRef","doc","set","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","get","exists","displayName","email","createdAt","Date","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAUA,OAAO,MAAMC,0BAA0B,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACzE,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqBJ,aAArB,CAAtB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAEA,QAAMK,KAAK,GAAGJ,SAAS,CAACI,KAAV,EAAd;AAEAN,EAAAA,YAAY,CAACO,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMC,SAAS,GAAGR,aAAa,CAACS,GAAd,EAAlB;AACAJ,IAAAA,KAAK,CAACK,GAAN,CAAUF,SAAV,EAAqBD,GAArB;AACD,GAHD;AAKD,CAXM;AAaP,OAAO,MAAMI,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGb,SAAS,CAACQ,GAAV,CAAe,SAAQG,QAAQ,CAACG,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACG,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBR,QAA/B;AACA,UAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMR,OAAO,CAACJ,GAAR,CAAY;AAChBS,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGR;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOU,KAAP,EAAc;AACdpB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCmB,KAAK,CAACC,OAAzC;AACD;AACF;;AACD,SAAOV,OAAP;AACD,CAvBM;AAyBP1B,QAAQ,CAACqC,aAAT,CAAuBpC,MAAvB;AAEA,OAAO,MAAMqC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAM0B,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyCr6as0ieF0m9gXabFRC3ANiTY0G1_GHtk\",\n  authDomain: \"crwn-db-e86e7.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-e86e7.firebaseio.com\",\n  projectId: \"crwn-db-e86e7\",\n  storageBucket: \"crwn-db-e86e7.appspot.com\",\n  messagingSenderId: \"887686867026\",\n  appId: \"1:887686867026:web:80972ffb9ca1290ff0978b\",\n};\n\nexport const addCollectionsAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n\n  const batch = firestore.batch()\n  \n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj)\n  })\n\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}